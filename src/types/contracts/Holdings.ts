/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface HoldingsInterface extends utils.Interface {
  functions: {
    "BUSD()": FunctionFragment;
    "PendingReward()": FunctionFragment;
    "active()": FunctionFragment;
    "calculateEarnings(address)": FunctionFragment;
    "changeActiveStatus()": FunctionFragment;
    "dailyROI()": FunctionFragment;
    "filter(uint256,address)": FunctionFragment;
    "minimumStakeValue()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolToken()": FunctionFragment;
    "referralCount(address)": FunctionFragment;
    "referralRewards(address)": FunctionFragment;
    "referralTaxRate()": FunctionFragment;
    "registerAndStake(uint256,address)": FunctionFragment;
    "registered(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardAPY()": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "setStakingTaxRate(uint256)": FunctionFragment;
    "setdailyROI(uint256)": FunctionFragment;
    "setminimumStakeValue(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeRewards(address)": FunctionFragment;
    "stakes(address)": FunctionFragment;
    "stakingTaxRate()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakes()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdrawEarnings()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BUSD"
      | "PendingReward"
      | "active"
      | "calculateEarnings"
      | "changeActiveStatus"
      | "dailyROI"
      | "filter"
      | "minimumStakeValue"
      | "owner"
      | "poolToken"
      | "referralCount"
      | "referralRewards"
      | "referralTaxRate"
      | "registerAndStake"
      | "registered"
      | "renounceOwnership"
      | "rewardAPY"
      | "rewardPool"
      | "setStakingTaxRate"
      | "setdailyROI"
      | "setminimumStakeValue"
      | "stake"
      | "stakeRewards"
      | "stakes"
      | "stakingTaxRate"
      | "totalStaked"
      | "totalStakes"
      | "transferOwnership"
      | "unstake"
      | "withdrawEarnings"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PendingReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateEarnings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeActiveStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dailyROI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "filter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakeValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndStake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "registered", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardAPY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setdailyROI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setminimumStakeValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeActiveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyROI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "filter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registered", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardAPY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakingTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setdailyROI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setminimumStakeValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;

  events: {
    "OnPoolTOkenPayout(address,uint256)": EventFragment;
    "OnRegisterAndStake(address,uint256,uint256,address)": EventFragment;
    "OnStake(address,uint256)": EventFragment;
    "OnUnstake(address,uint256)": EventFragment;
    "OnWithdrawal(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OnPoolTOkenPayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnRegisterAndStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnStake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OnPoolTOkenPayoutEventObject {
  sender: string;
  amount: BigNumber;
}
export type OnPoolTOkenPayoutEvent = TypedEvent<
  [string, BigNumber],
  OnPoolTOkenPayoutEventObject
>;

export type OnPoolTOkenPayoutEventFilter =
  TypedEventFilter<OnPoolTOkenPayoutEvent>;

export interface OnRegisterAndStakeEventObject {
  stakeholder: string;
  amount: BigNumber;
  totalTax: BigNumber;
  _referrer: string;
}
export type OnRegisterAndStakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  OnRegisterAndStakeEventObject
>;

export type OnRegisterAndStakeEventFilter =
  TypedEventFilter<OnRegisterAndStakeEvent>;

export interface OnStakeEventObject {
  sender: string;
  amount: BigNumber;
}
export type OnStakeEvent = TypedEvent<[string, BigNumber], OnStakeEventObject>;

export type OnStakeEventFilter = TypedEventFilter<OnStakeEvent>;

export interface OnUnstakeEventObject {
  sender: string;
  amount: BigNumber;
}
export type OnUnstakeEvent = TypedEvent<
  [string, BigNumber],
  OnUnstakeEventObject
>;

export type OnUnstakeEventFilter = TypedEventFilter<OnUnstakeEvent>;

export interface OnWithdrawalEventObject {
  sender: string;
  amount: BigNumber;
}
export type OnWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  OnWithdrawalEventObject
>;

export type OnWithdrawalEventFilter = TypedEventFilter<OnWithdrawalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Holdings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HoldingsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUSD(overrides?: CallOverrides): Promise<[string]>;

    PendingReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    calculateEarnings(
      _stakeholder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeActiveStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailyROI(overrides?: CallOverrides): Promise<[BigNumber]>;

    filter(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minimumStakeValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    referralCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerAndStake(
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registered(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardAPY(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPool(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimable: BigNumber }>;

    setStakingTaxRate(
      _stakingTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setdailyROI(
      _dailyROI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setminimumStakeValue(
      _minimumStakeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeRewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakes(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BUSD(overrides?: CallOverrides): Promise<string>;

  PendingReward(overrides?: CallOverrides): Promise<BigNumber>;

  active(overrides?: CallOverrides): Promise<boolean>;

  calculateEarnings(
    _stakeholder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeActiveStatus(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailyROI(overrides?: CallOverrides): Promise<BigNumber>;

  filter(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minimumStakeValue(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolToken(overrides?: CallOverrides): Promise<string>;

  referralCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  referralRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  referralTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

  registerAndStake(
    _amount: BigNumberish,
    _referrer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardAPY(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

  setStakingTaxRate(
    _stakingTaxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setdailyROI(
    _dailyROI: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setminimumStakeValue(
    _minimumStakeValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stakingTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEarnings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BUSD(overrides?: CallOverrides): Promise<string>;

    PendingReward(overrides?: CallOverrides): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<boolean>;

    calculateEarnings(
      _stakeholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeActiveStatus(overrides?: CallOverrides): Promise<void>;

    dailyROI(overrides?: CallOverrides): Promise<BigNumber>;

    filter(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumStakeValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolToken(overrides?: CallOverrides): Promise<string>;

    referralCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    registerAndStake(
      _amount: BigNumberish,
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registered(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardAPY(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setStakingTaxRate(
      _stakingTaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setdailyROI(
      _dailyROI: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setminimumStakeValue(
      _minimumStakeValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakingTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawEarnings(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OnPoolTOkenPayout(address,uint256)"(
      sender?: null,
      amount?: null
    ): OnPoolTOkenPayoutEventFilter;
    OnPoolTOkenPayout(
      sender?: null,
      amount?: null
    ): OnPoolTOkenPayoutEventFilter;

    "OnRegisterAndStake(address,uint256,uint256,address)"(
      stakeholder?: null,
      amount?: null,
      totalTax?: null,
      _referrer?: null
    ): OnRegisterAndStakeEventFilter;
    OnRegisterAndStake(
      stakeholder?: null,
      amount?: null,
      totalTax?: null,
      _referrer?: null
    ): OnRegisterAndStakeEventFilter;

    "OnStake(address,uint256)"(
      sender?: null,
      amount?: null
    ): OnStakeEventFilter;
    OnStake(sender?: null, amount?: null): OnStakeEventFilter;

    "OnUnstake(address,uint256)"(
      sender?: null,
      amount?: null
    ): OnUnstakeEventFilter;
    OnUnstake(sender?: null, amount?: null): OnUnstakeEventFilter;

    "OnWithdrawal(address,uint256)"(
      sender?: null,
      amount?: null
    ): OnWithdrawalEventFilter;
    OnWithdrawal(sender?: null, amount?: null): OnWithdrawalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    BUSD(overrides?: CallOverrides): Promise<BigNumber>;

    PendingReward(overrides?: CallOverrides): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    calculateEarnings(
      _stakeholder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeActiveStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailyROI(overrides?: CallOverrides): Promise<BigNumber>;

    filter(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minimumStakeValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    referralCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referralTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    registerAndStake(
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registered(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardAPY(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setStakingTaxRate(
      _stakingTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setdailyROI(
      _dailyROI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setminimumStakeValue(
      _minimumStakeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stakingTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakes(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PendingReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateEarnings(
      _stakeholder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeActiveStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailyROI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    filter(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minimumStakeValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAndStake(
      _amount: BigNumberish,
      _referrer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registered(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardAPY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStakingTaxRate(
      _stakingTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setdailyROI(
      _dailyROI: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setminimumStakeValue(
      _minimumStakeValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingTaxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
