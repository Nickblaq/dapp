/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface PresaleInterface extends utils.Interface {
  functions: {
    "LDN()": FunctionFragment;
    "active()": FunctionFragment;
    "buy(address)": FunctionFragment;
    "buyBonusRate()": FunctionFragment;
    "changeActiveStatus()": FunctionFragment;
    "contributions()": FunctionFragment;
    "owner()": FunctionFragment;
    "rateOfTokensToGivePerEth()": FunctionFragment;
    "referralCommissionRate()": FunctionFragment;
    "referralCount(address)": FunctionFragment;
    "referralRewards(address)": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "walletToStoreTheEthers()": FunctionFragment;
    "withdrawEarnings()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LDN"
      | "active"
      | "buy"
      | "buyBonusRate"
      | "changeActiveStatus"
      | "contributions"
      | "owner"
      | "rateOfTokensToGivePerEth"
      | "referralCommissionRate"
      | "referralCount"
      | "referralRewards"
      | "totalStaked"
      | "walletToStoreTheEthers"
      | "withdrawEarnings"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LDN", values?: undefined): string;
  encodeFunctionData(functionFragment: "active", values?: undefined): string;
  encodeFunctionData(functionFragment: "buy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyBonusRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeActiveStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rateOfTokensToGivePerEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCommissionRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "referralRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "walletToStoreTheEthers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LDN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "active", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBonusRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeActiveStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rateOfTokensToGivePerEth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCommissionRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletToStoreTheEthers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;

  events: {
    "ReferralCommissionPaid(address,address,uint256)": EventFragment;
    "ReferralRecorded(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReferralCommissionPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRecorded"): EventFragment;
}

export interface ReferralCommissionPaidEventObject {
  user: string;
  referrer: string;
  commissionAmount: BigNumber;
}
export type ReferralCommissionPaidEvent = TypedEvent<
  [string, string, BigNumber],
  ReferralCommissionPaidEventObject
>;

export type ReferralCommissionPaidEventFilter =
  TypedEventFilter<ReferralCommissionPaidEvent>;

export interface ReferralRecordedEventObject {
  user: string;
  referrer: string;
}
export type ReferralRecordedEvent = TypedEvent<
  [string, string],
  ReferralRecordedEventObject
>;

export type ReferralRecordedEventFilter =
  TypedEventFilter<ReferralRecordedEvent>;

export interface Presale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PresaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LDN(overrides?: CallOverrides): Promise<[string]>;

    active(overrides?: CallOverrides): Promise<[boolean]>;

    buy(
      _referrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBonusRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeActiveStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributions(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weiContributions: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rateOfTokensToGivePerEth(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralCommissionRate(overrides?: CallOverrides): Promise<[number]>;

    referralCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    walletToStoreTheEthers(overrides?: CallOverrides): Promise<[string]>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LDN(overrides?: CallOverrides): Promise<string>;

  active(overrides?: CallOverrides): Promise<boolean>;

  buy(
    _referrer: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBonusRate(overrides?: CallOverrides): Promise<BigNumber>;

  changeActiveStatus(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributions(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  rateOfTokensToGivePerEth(overrides?: CallOverrides): Promise<BigNumber>;

  referralCommissionRate(overrides?: CallOverrides): Promise<number>;

  referralCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  referralRewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  walletToStoreTheEthers(overrides?: CallOverrides): Promise<string>;

  withdrawEarnings(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LDN(overrides?: CallOverrides): Promise<string>;

    active(overrides?: CallOverrides): Promise<boolean>;

    buy(_referrer: string, overrides?: CallOverrides): Promise<void>;

    buyBonusRate(overrides?: CallOverrides): Promise<BigNumber>;

    changeActiveStatus(overrides?: CallOverrides): Promise<void>;

    contributions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    rateOfTokensToGivePerEth(overrides?: CallOverrides): Promise<BigNumber>;

    referralCommissionRate(overrides?: CallOverrides): Promise<number>;

    referralCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    walletToStoreTheEthers(overrides?: CallOverrides): Promise<string>;

    withdrawEarnings(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ReferralCommissionPaid(address,address,uint256)"(
      user?: string | null,
      referrer?: string | null,
      commissionAmount?: null
    ): ReferralCommissionPaidEventFilter;
    ReferralCommissionPaid(
      user?: string | null,
      referrer?: string | null,
      commissionAmount?: null
    ): ReferralCommissionPaidEventFilter;

    "ReferralRecorded(address,address)"(
      user?: string | null,
      referrer?: string | null
    ): ReferralRecordedEventFilter;
    ReferralRecorded(
      user?: string | null,
      referrer?: string | null
    ): ReferralRecordedEventFilter;
  };

  estimateGas: {
    LDN(overrides?: CallOverrides): Promise<BigNumber>;

    active(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _referrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBonusRate(overrides?: CallOverrides): Promise<BigNumber>;

    changeActiveStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributions(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rateOfTokensToGivePerEth(overrides?: CallOverrides): Promise<BigNumber>;

    referralCommissionRate(overrides?: CallOverrides): Promise<BigNumber>;

    referralCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    walletToStoreTheEthers(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LDN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    active(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _referrer: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBonusRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeActiveStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateOfTokensToGivePerEth(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralCommissionRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralRewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    walletToStoreTheEthers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawEarnings(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
